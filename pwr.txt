const {test, expect}=require('@playwright/test');
test('exercise',async({page})=>{
test.setTimeout(120000);

await page.goto("https://testautomationpractice.blogspot.com/");
const title="Automation Testing Practice"
await expect(page).toHaveTitle(title);

//DatePicker Handling
const year="2025"
const month="March"
const day="23" 
const resultDate="03/23/2025"

await page.locator("id=datepicker").click();
while(true){
const cMonth=await page.locator("//span[@class='ui-datepicker-month']").textContent();
const cYear=await page.locator("//span[@class='ui-datepicker-year']").textContent();

if(cMonth==month&&cYear==year){
break;
}
await page.locator("[title='Next']").click();
}
const days=await page.$$(".ui-state-default");
for(const d of days){
if(await d.textContent()==day){
await d.click();
break;
}
}
await page.waitForTimeout(1000);
//Verification
const actualResult=await page.locator("id=datepicker").inputValue();
await expect(actualResult).toBe(resultDate);
console.log("DateResult ===  ",actualResult);


})



const { test, expect } = require('@playwright/test');
import { UtilMethods } from './UtilMethods';

const methods = new UtilMethods();
let token;

const baseURL = "https://simple-books-api.glitch.me";

test("GetStatus", async ({ request }) => {

    const response = await request.get(baseURL + "/status");
    const respBody = JSON.parse(await response.text());
    const body_status = JSON.stringify(respBody.status);
    expect(await response.status()).toBe(200);
    expect(await body_status == "OK");
})

test("Get all books", async ({ request }) => {

    const response = await request.get(baseURL + "/books");
    const respBody = JSON.parse(await response.text());
    const firstBookObj = await respBody[0];

    expect(await response.status()).toBe(200);
    expect(await firstBookObj.name).toBe("The Russian");
    expect(await firstBookObj.type).toBe("fiction");
})


test("Get book by ID", async ({ request }) => {

    const response = await request.get(baseURL + "/books/2");
    const respBody = JSON.parse(await response.text());
    const author = respBody.author;

    expect(await response.status()).toBe(200);
    expect(await author).toBe("Cicely Tyson");
});

test("authentication and getting token", async ({ request }) => {

    const email = await methods.createMail();
    const response = await request.post(baseURL + "/api-clients/",
        {
            data: { clientName: "zika", clientEmail: "mymail" + email },
            headers: { "Accept": "application/json" }
        });
    const respBody = JSON.parse(await response.text());
    token = respBody.accessToken;

    expect(await response.status()).toBe(201);
    expect(await token).toBeTruthy();
});

test("Order the book", async ({ request }) => {

    const response = await request.post(baseURL + "/orders",
        {
            data: { bookId: 1, customerName: "marko" },
            headers: {
                "Authorization": "Bearer " + String(token),
                "Accept": "application/json"
            }
        });

    const respBody = JSON.parse(await response.text());
    console.log(respBody);

    expect(await response.status()).toBe(201);
    expect(respBody.created).toBe(true);
});

exports.UtilMethods =
   class UtilMethods {


      async trimTxt(text) {

         const trimedTxt = await text.slice(1, -1);
         return trimedTxt;
      }

      async createMail() {

         const mailA = "june";
         const mailB = "@gmail.com"
         const num = await Math.floor(Math.random() * 3000);
         const mailC = await String(num);
         const mailX = mailA + mailC + mailB;
         return mailX;
      }
   }

https://github.com/xdevplatform/Twitter-API-v2-sample-code/blob/main/Manage-Tweets/create_tweet.js


